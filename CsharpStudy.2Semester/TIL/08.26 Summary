## TODAY NOTE C# [ 람다식과 함수 ]  [ 25.08.26 ]


### C# 10-2 람다식과 함수형 프로그래밍 정리### 
**1. 1급 객체 (First Class Object)**

- 변수에 담을 수 있는 객체를 말함.
- 대표적인 예: 값(Value), 인스턴스(Object), 함수(Function).
- 즉, 함수도 변수처럼 다룰 수 있다.

**2. 함수 (Function)**

- 함수도 1급 객체로 취급됨.
- 입력이 같으면 출력도 항상 같아야 함. (수학적 함수처럼) 예: f(x) = 2x + 3

**3. 함수 표현 방법**

-람다식(lambda expression)으로 표현 가능.
- 함수를 값처럼 간단히 적을 수 있는 문법.

**4. 델리게이트 (Delegate)**

- C#에서 메서드를 참조할 수 있도록 하는 타입 안전한 함수 포인터.
- 메서드(클래스 안에 속한 함수)를 변수처럼 넘겨줄 수 있게 해줌.
- 이벤트 처리, 콜백 함수 등에 자주 사용됨.

**5. 함수를 값으로 전달**

- 함수도 값처럼 전달할 수 있음.
- 입출력 타입만 맞으면 동일한 형태의 함수로 취급할 수 있음.
- C#에서는 Func<>, Action<> 같은 함수 타입을 활용.

**6. 메서드 vs 함수**

- 메서드(Method): 클래스에 속하고, 객체를 조작하는 함수.
- 함수(Function): 이름이 없어도 되고, 더 자유롭게 다룸.
- 코드상으로는 거의 비슷하지만, 소속과 활용 방식이 다름.

**7. 익명 함수 (Anonymous Function)**

- 이름 없는 함수.
- 보통 람다식 형태로 작성됨.
- 필요할 때 즉석에서 정의해서 사용.

**8. 함수형 프로그래밍 (Functional Programming)**

- C#은 객체지향(OOP) + 함수형(FP) 모두 지원하는 언어.
- 함수형 프로그래밍 특징:
- 데이터를 수학적 함수 계산처럼 처리.
- 가변 데이터(변경 가능한 값)를 피함.
- 코드를 더 간결하고 예측 가능하게 만듦.

**9. 고계 함수 (Higher-Order Function)**

- 함수를 다루는 함수.
- 다른 함수를 매개변수로 받거나, 함수를 결과로 반환하는 함수.
- 1차 함수: 숫자, 문자열 같은 일반 데이터 다룸.
- 고계 함수: 함수를 데이터처럼 다룸.

**10. C# LINQ에서 제공되는 대표적인 고계 함수**

- Where : 조건에 맞는 데이터 필터링.
- Select : 데이터를 변환.
- ForEach : 모든 요소 순환.
- Aggregate : 요소들을 하나로 줄임 (예: 합계, 평균).
- Any : 특정 조건을 만족하는 요소가 있는지 확인.

**11. 예시 함수들**

Where: 조건문 필터링 (for, if 조합과 동일한 역할).

Select: 변환 (예: x → x * 2).

ToList(): 결과를 List 형태로 변환 (많이 쓰지만, 남용은 안티패턴).

ToHashSet(): Set으로 변환 → 중복 제거.

Any: 조건에 맞는 값이 존재하는지 확인.

Aggregate: 반복적으로 줄여 하나의 값 생성.