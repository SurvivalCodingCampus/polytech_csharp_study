* String & String Builder 차이점
String과 StringBuilder는 문자열을 다루는 자료형
String은 변경 불가능한 자료형이고, StringBuilder는 변경 가능한 자료형이다.

** String:
 - 변경 불가능한 자료형이므로, 문자열 연산(예: 연결, 수정)이 발생할 때마다 새로운 문자열 객체 생성
 - 문자열 연산이 잦은 경우 성능 저하를 유발할 수 있음.
 - 간단한 문자열 조작에 유용함.

** StringBuilder:
 - 변경 가능한 자료형으로, 문자열을 추가, 삭제, 수정할 때 기존 객체를 변경
 - 문자열 연산이 잦은 경우, 메모리 할당 및 객체 생성을 반복하지 않아 성능향상을 기대할 수 있음.
 - StringBuilder는 동기화를 지원하지 않으므로 단일 스레드 환경에서 사용하기 적합.

*** 요약
 - 간단한 문자열 조작에는 string을 사용하며, 잦은 문자열 연산에는 StringBuilder를 사용하는 것이 좋음.
 - String은 변경 불가능, StringBuilder는 변경 가능
 - 단일 스레드 환경에선 StringBuilder가 성능상 유리


---------------
25/08/25

* 디버깅
 - 소프트웨어의 오류 식별->원인 파악->수정->확인하는 과정. 올바른 동작을 보장하려면 필수
 
 ** 기본 도구
 - 로깅: 실행 중 이벤트/값을 기록해서 흐름을 눈으로 확인
 - 브레이크포인트: 특정 줄에서 실행을 멈춰 현재 상태를 관찰
 - 디버거: 일시정지, 한 줄 실행, 변수/메모리 검사 등 종합 도구
 - 스택 추적(call stack): "어떤 경로로 여기까지 왔는가"를 단계별로 확인
 
 * 디버깅 팁
 
 - 문제를 최소 재현 케이스로 축소
 - 차분히 실패-수정-재실행 루프를 반복하며 인내심 기르기!
 
 
 ---------------
 26/08/29
 
 * 람다식과 함수
 - Where는 조건을 걸어 원하는 데이터만 골라내는 함수
 - Select는 원하는 속성이나 변환된 값을 뽑아내는 함수
 - OrderBy는 지정된 기준에 따라 데이터를 정렬하는 함수
 - ForEach는 컬렉션의 모든 요소를 순회하며 동작을 수행하는 함수
 - Aggregate는 컬렉션을 누적 처리하여 하나의 결과로 줄이는 함수
 - Any는 조건을 만족하는 요소가 하나라도 있는지 확인하는 함수