c# 기초 6.

1) 비동기 작업

게임이 실행되는 동안 입력받은 특정 행동을 수행하려면
게임이 멈춰선 안되니까 순차적인 동기 방식이 아닌 비동기 방식을 이용
>> 메인 스레드를 막지 않는다.


2) 콜백

콜백 기준의 동기화 - 코드의 깊이가 길어지고 관리의 어려움(디버깅, 병렬처리의 어려움)
오래 걸리는 코드가 메인 스레드를 점령하기에 연산 처리 속도가 길어짐

여러 비동기 코드를 동시에 실행시키면 결과값이 코드 순서에 상관없이 os가 지정해준 순서로 출력됨


3) async/await

위의 콜백의 문제점을 해결하는 코드 형식
>> await는 해당 task가 끝날때 까지 함수 실행을 기다린다. 
(처리 전에 스레드를 반환하였다가 연산 완료 이후 스레드를 가져가 결과값을 제출)

Task 내부에서 try/catch 사용이 가능하여 예외 처리가 원활함
cancellation >> 주로 런타임 아웃의 경우를 처리하는 방식으로 일정 시간 이내에 연산이 안되면 취소 처리하여
예외로 넘기기가 가능


3) 병렬 처리

Task.WhenAll() - 모든 작업을 동시에 시작하여 성능을 극한으로 올리고 모두 끝날때까지 기다림
>> Unity 기준 새로운 Scene으로 전환할때, 데이터 로딩, 애니메이션 연출 등 다양한 환경에서 사용